#!/bin/sh
############################################################################
#   Copyright (c) Hubert Bukowski. All rights reserved.
#   Licensed under the MIT License.
#   See License.txt in the project root for full license information.
#===========================================================================
#   This script extracts semantic version from the current repository
#   tree via applied version tags and untagged commit messages.
############################################################################
exec 3>&1
set -e

#===========================================================================
#   Configuration
#===========================================================================
SUBDIRECTORY_OK='Yes'
OPTIONS_KEEPDASHDASH=
OPTIONS_STUCKLONG=
OPTIONS_SPEC='git semver [options]
--
b,no-branch           disables branch information build metadata generation.
a,no-hash             disables commit SHA information build metadata generation.
t,no-timestamp        disables timestamp information build metadata generation.
l,no-local            disables local changes information build metadata generation.
p,no-pre-relase       disables pre-release version generation.
r,release             disables all pre-release and build metadata generation.
tag-pattern=          pattern for version tag matching, "()" will be reeplaced by "([0-9]+\.[0-9]+\.[0-9]+)". (default: "^v()$")
merge-pattern=        pattern for merge commit message, "\K" will be used to extract commit message. (default: "^Merged PR \d+: \K.*$")
revert-pattern=       pattern for revert commit message, "\K" will be used to extract commit message. (default: "^Revert "\K"")
reaaply-pattern=      pattern for reapply commit message, "\K" will be used to extract commit message. (default: "^Reapply "\K"")
major-pattern=        commit message pattern for major changes. (default: "^(Breaking|Major):")
minor-pattern=        commit message pattern for minor changes. (default: "^(Feature|Minor):")
c,change-log          generate changelog for the changes included in the version.
v,verbose             diagnostic message logging.
'

. "$(git --exec-path)/git-sh-setup"

#===========================================================================
#   Initializes script variables and parameters.
#===========================================================================
no_branch=0
no_hash=0
no_timestamp=0
no_local=0
no_pre_release=0
tag_pattern='v\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\)'
merge_pattern='^Merged PR \d+: \(.*\)$'
revert_pattern='^Revert "\(.*\)"$'
reapply_pattern='^Reapply "\(.*\)"$'
major_pattern='^(Breaking):'
minor_pattern='^(Feature):'
change_log=0
verbose=0

while test $# != 0
do
    case "$1" in
    -b|--no-branch)
        no_branch=1
        ;;
    -a|--no-hash)
        no_hash=1
        ;;
    -t|--no-timestamp)
        no_timestamp=1
        ;;
    -l|--no-local)
        no_local=1
        ;;
    -p|--no-pre-release)
        no_pre_release=1
        ;;
    -r|--release)
        no_branch=1
        no_hash=1
        no_timestamp=1
        no_local=1
        no_pre_release=1
        ;;
    --tag-pattern)
        shift
        tag_pattern=$(echo "$1" | sed --posix -ne 's/()/\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\)/p')
        ;;
    --merge-pattern)
        shift
        merge_pattern=$1
        ;;
    --revert-pattern)
        shift
        revert_pattern=$1
        ;;
    --reapply-pattern)
        shift
        reapply_pattern=$1
        ;;
    --major-pattern)
        shift
        major_pattern=$1
        ;;
    --minor-pattern)
        shift
        minor_pattern=$1
        ;;
    -v|--verbose)
        verbose=1
        ;;
    -c|--change-log)
        change_log=1
        ;;
    --)
        shift
        break
        ;;
    *)
        usage
        ;;
    esac
    shift
done

current_commit=""
versioned_commit=""
commit_history=""
major=0
minor=1
patch=0

main() {
    # Determine current commit.
    get_current_commit

    # Determine first parent of current commit that has version tag appplied.
    get_versioned_parent_and_version

    # Determine commit history to analyze.
    get_commit_history

    processed_commit=$(printf "%b" "$commit_history" | head -n 1)
    commit_history=$(printf "%b" "$commit_history" | sed '1d')
    commit_count=0
    if [ -n "$commit_history" ]; then
      commit_count="$(printf "%b" "$commit_history" | grep -c '^')"
    fi
    
    verbose "Analyzing commit history of '$commit_count' commits until '$processed_commit'"

    while [ -n "$commit_history" ]; do
        commit_number=$((commit_number + 1))
        local_commit_to_analyze=$(echo "$commit_history" | head -n 1)
        commit_history=$(echo "$commit_history" | sed '1d')
        verbose "Analyzing commit history for commit $local_commit_to_analyze"
        evaluate_version_increment "$local_commit_to_analyze"
        processed_commit=$local_commit_to_analyze
    done

    semver="$major.$minor.$patch"
    pre_release_ver=""
    build_ver=""

    if [ "$no_pre_release" -ne 1 ] && [ "$commit_count" -gt 0 ]; then
        pre_release_ver="beta.$commit_count"
    fi

    if [ $no_local -ne 1 ]; then
        if [ -n "$(git status --porcelain)" ]; then
            if [ -z "$pre_release_ver" ]; then
                pre_release_ver="local"
            else
                pre_release_ver="$pre_release_ver.local"
            fi
        fi
    fi

    if [ $no_branch -ne 1 ]; then
        branch="$(git rev-parse --abbrev-ref HEAD)"
        branch=$(echo "$branch" | sed 's/[^[:alnum:]]/-/g')
        build_ver="Branch.$branch"
    fi

    if [ $no_hash -ne 1 ]; then
        hash="$(git rev-parse HEAD)"
        if [ -z "$build_ver" ]; then
            build_ver="Hash.$hash"
        else
            build_ver="$build_ver.Hash.$hash"
        fi
    fi

    if [ $no_timestamp -ne 1 ]; then
        timestamp="$(date -u +%Y%m%d-%H%M%S-%N)"
        if [ -z "$build_ver" ]; then
            build_ver="Timestamp.$timestamp"
        else
            build_ver="$build_ver.Timestamp.$timestamp"
        fi
    fi

    if [ -n "$pre_release_ver" ]; then
        semver="$semver-$pre_release_ver"
    fi

    if [ -n "$build_ver" ]; then
        semver="$semver+$build_ver"
    fi

    echo "$semver"

    if [ "$change_log" -eq 1 ]; then
        extract_changelog "$current_commit" "$versioned_commit"
    fi
}


strip_message() {
    message=$1; shift
    pattern=$1; shift

    verbose "Pattern: $pattern"
    match=$(echo "$message" | sed --posix -ne "s/$pattern/\1/gp")
    verbose "Stripped message: '$match'"
    if [ -n "$match" ]; then
        echo "$match"
    else
        echo "$message"
    fi
}


extract_changelog() {
    local_start_commit=$1; shift
    local_boundary=$1; shift

    verbose "Extracting changelog between $local_start_commit and $local_boundary"
    local_parents=$(git rev-list --first-parent "$local_start_commit" "^$local_boundary")

    verbose "Commits:\n$local_parents"

    for local_parent in $local_parents; do
        verbose "Commit: $local_parent"
        local_message="$(git show -s --format=%s "$local_parent")"
        verbose "Message: '$local_message'"
        local_message=$(strip_message "$local_message" "$reapply_pattern")
        local_message=$(strip_message "$local_message" "$revert_pattern")
        verbose "Message after stripping: '$local_message'"
        
        local_merged_commits=$(git log --pretty=%P -n 1 "$local_parent" | tr ' ' '\n' | sed '1d')
        local_merged_commits_count=$(echo "$local_merged_commits" | wc -w)
        verbose "Merged Commits ($local_merged_commits_count): '$local_merged_commits'"
        
        verbose "Merge Pattern: $merge_pattern"
        merge_match=$(strip_message "$local_message" "$merge_pattern")
        verbose "Parsed Message: '$merge_match'"
        if [ "$merge_match" != "$local_message" ]; then
            verbose "Commit is a merge commit with extracted message."
            local_message=$merge_match
            if [ "$local_merged_commits_count" -eq 0 ]; then
                local_merged_commits=$local_parent
            fi

            for Local_merged_commit in $local_merged_commits; do
                authors=""
                verbose "Checking authors for merged commit and parents $Local_merged_commit"
                commits_to_check=$(git rev-list "$Local_merged_commit" "^$local_parent^1")
                verbose "Commits to check: $commits_to_check"
                for local_commit_to_check in $commits_to_check; do
                    verbose "Checking author for commit $local_commit_to_check"
                    author=$(git log --pretty=format:"%an" -n 1 "$local_commit_to_check")
                    verbose "Author: $author"
                    
                    IN=$authors
                    iter=""
                    found=0
                    while [ "$IN" != "$iter" ] ;do
                        iter=${IN%%,*}
                        IN="${IN#"$iter",}"
                        iter="${iter#"${iter%%[![:space:]]*}"}"
                        iter="${iter%"${iter##*[![:space:]]}"}"
                        if [ "$iter" = "$author" ]; then
                            found=1
                            break
                        fi
                    done
                    if [ "$found" -eq 0 ]; then
                       authors="$authors, $author"
                    fi
                done
            done
            
            verbose "Result '$local_message ($authors)'"
            echo "$local_message ($authors)"
        elif [ "$local_merged_commits_count" -gt 0 ]; then
            verbose "Commit is a merge commit with unknown message."
            for Local_merged_commit in $local_merged_commits; do
                verbose "About to call recursievly for $Local_merged_commit and $local_parent^1"
                extract_changelog "$Local_merged_commit" "$local_parent^1"
            done
        else
            verbose "Commit is a regular commit."
            author=$(git log --pretty=format:"%an" -n 1 "$local_parent")
            verbose "Result '$local_message ($author)'"
            echo "$local_message ($author)"
        fi
    done
}

evaluate_version_increment() {
    local_unique_commits=$(git rev-list --parents --reverse "$1" "^$processed_commit" | tr ' ' '\n' | awk '!x[$0]++' | grep -v "$processed_commit")
    verbose "List of changes:\n$local_unique_commits"
    local_changeImpact=0
    for commit in $local_unique_commits; do
        verbose "Checking message for commit '$commit'"
        message=$(git show -s --format=%s "$commit")
        message=$(strip_message "$message" "$reapply_pattern")
        message=$(strip_message "$message" "$revert_pattern")
        message=$(strip_message "$message" "$merge_pattern")

        verbose "Stripped message: '$message'"

        major_match=$(echo "$message" | sed --posix -ne "s/$major_pattern/\1/gp")
        minor_match=$(echo "$message" | sed --posix -ne "s/$minor_pattern/\1/gp")
        
        if [ -n "$major_match" ]; then
            local_changeImpact=3
        elif [ -n "$minor_match" ]; then
            if [ "$local_changeImpact" -lt 2 ]; then
                local_changeImpact=2
            fi
        elif [ "$local_changeImpact" -lt 1 ]; then
            local_changeImpact=1
        fi
    done

    increment_version $local_changeImpact
}


get_current_commit() {
    verbose "Checking empty repository."
    current_commit="$(git rev-list -n 1 --all 2>&1)"

    last_command_exit_code=$?
    if [ $last_command_exit_code -ne 0 ] || [ -z "$current_commit" ]; then
        error "Repository is empty."
    else
        verbose "Checking current commit."
        current_commit="$(git rev-parse HEAD)"
        verbose "Using current commit '$current_commit'"
    fi
}


get_versioned_parent_and_version() {

    verbose "Checking versioned parent of commit '$current_commit' using tag pattern '$tag_pattern'."
    local_commit=$current_commit
    while :
    do
        verbose "Describing commit '$local_commit'."
        local_tag="$(git describe --tags --abbrev=0 --match '?*.?*.?*' --always --first-parent "$local_commit")"
        verbose "Candidate tag is '$local_tag'."
        pattern=$(printf "%s%s%s" 's/^' "$tag_pattern" '$/\1/gp')
        verbose "Executing sed $pattern"
        local_version=$(echo "$local_tag" | sed --posix -ne "$pattern")
                
        verbose "Local version '$local_version'."
        if [ -n "$local_version" ] ; then
            verbose "Candidate matches tag pattern."
            major=$(echo "$local_version" | cut -f 1 -d '.')
            minor=$(echo "$local_version" | cut -f 2 -d '.')
            patch=$(echo "$local_version" | cut -f 3 -d '.')
            break
        else
            verbose "Candidate does not match tag pattern. Checking parent."
            local_parent="$(git log --format=%P -n 1 "$local_tag" | cut -d ' ' -f 1)"
            verbose "Candidate's parent is '$local_parent'."
            if [ -z "$local_parent" ]; then
                verbose "Candidate is an initial commit."
                break
            fi

            local_commit=$local_parent
        fi
    done

    versioned_commit="$(git rev-list -n 1 "$local_tag")"
    verbose "Using versioned parent '$versioned_commit'"
    verbose "Using base version '$major.$minor.$patch'"
}


get_commit_history() {
    verbose "Checking commit history between versioned commit '$versioned_commit' and current commit '$current_commit'."
    commit_history=$(printf "%b" "$versioned_commit\n$(git rev-list --first-parent --reverse "$versioned_commit..$current_commit")" | tr ' ' '\n')
    verbose "Commits history starting from oldest:\n$commit_history"
}


increment_version() {
    case $1 in
    3)
        verbose "Incrementing major version."
        major=$((major + 1))
        minor=0
        patch=0
        ;;
    2)
        verbose "Incrementing minor version."
        minor=$((minor + 1))
        patch=0
        ;;
    1)
        verbose "Incrementing patch version."
        patch=$((patch + 1))
        ;;
    esac
}


verbose() {
    if [ $verbose -eq 1 ]; then
        printf "%b\n" "$*" >&3
    fi
}


error() {
    printf "ERROR: %b\n" "$*" >&2
    exit 1
}

main "$@"
