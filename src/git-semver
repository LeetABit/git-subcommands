#!/bin/bash
############################################################################
#   Copyright (c) Hubert Bukowski. All rights reserved.
#   Licensed under the MIT License.
#   See License.txt in the project root for full license information.
#===========================================================================
#   This script extracts semantic version from the current repository
#   tree via applied version tags and untagged commit messages.
############################################################################
exec 3>&1
set -e
shopt -s expand_aliases
shopt -s xpg_echo
alias verbose='log_verbose $LINENO $FUNCNAME '
alias error='log_error $LINENO $FUNCNAME '

#===========================================================================
#   Configuration
#===========================================================================
SUBDIRECTORY_OK='Yes'
OPTIONS_KEEPDASHDASH=
OPTIONS_STUCKLONG=
OPTIONS_SPEC='git semver [options]
--
b,no-branch           disables branch information build metadata generation.
a,no-hash             disables commit SHA information build metadata generation.
t,no-timestamp        disables timestamp information build metadata generation.
l,no-local            disables local changes information build metadata generation.
p,no-pre-relase       disables pre-release version generation.
r,release             disables all pre-release and build metadata generation.
release-branch=       name of the branch commits to which shall be threated as version increment. (default: origin/HEAD or current branch)
tag-pattern=          pattern for version tag matching. "()" will be reeplaced by "([0-9]+)\.([0-9]+)\.([0-9]+)". (default: "^v()$")
merge-pattern=        pattern for merge commit message, "()" will be used to extract commit message. (default: "^Merged PR \d+: \K.*$")
major-pattern=        commit message pattern for major changes. (default: "^(Breaking|Major):")
minor-pattern=        commit message pattern for minor changes. (default: "^(Feature|Minor):")
c,change-log          generate changelog for the changes included in the version.
v,verbose             diagnostic message logging.
'

. "$(git --exec-path)/git-sh-setup"

#===========================================================================
#   Initializes script variables and parameters.
#===========================================================================
no_branch=
no_hash=
no_timestamp=
no_local=
no_pre_relase=
release_branch=
tag_pattern='^v()$'
merge_pattern='^Merged PR \d+: \K.*$'
major_pattern='^(Breaking):'
minor_pattern='^(Feature):'
change_log=
verbose=

while test $# != 0
do
    case "$1" in
    -b|--no-branch)
        no_branch=1
        ;;
    -a|--no-hash)
        no_hash=1
        ;;
    -t|--no-timestamp)
        no_timestamp=1
        ;;
    -l|--no-local)
        no_local=1
        ;;
    -p|--no-pre-release)
        no_pre_release=1
        ;;
    -r|--release)
        no_branch=1
        no_hash=1
        no_timestamp=1
        no_local=1
        no_pre_release=1
        ;;
    --release-branch)
        shift
        release_branch=$1
        ;;
    --tag-pattern)
        shift
        tag_pattern=$1
        ;;
    --merge-pattern)
        shift
        merge_pattern=$1
        ;;
    --major-pattern)
        shift
        major_pattern=$1
        ;;
    --minor-pattern)
        shift
        minor_pattern=$1
        ;;
    -v|--verbose)
        verbose=1
        ;;
    -c|--change-log)
        change_log=1
        ;;
    --)
        shift
        break
        ;;
    *)
        usage
        ;;
    esac
    shift
done

function main {
    # Determine release branch.
    local release_branch=$(get_release_branch $release_branch)

    # Determine current commit.
    local current_commit=$(get_current_commit)

    # Determine first parent of current commit that has version tag appplied.
    readarray -t versioned_parent <<< "$(get_versioned_parent_and_version $current_commit $tag_pattern)"
    versioned_parent_commit=${versioned_parent[0]}
    versioned_parent_version=${versioned_parent[1]}
    IFS='.' read -r major minor patch <<< "$versioned_parent_version"

    # Determine commit history to analyze.
    local commit_history="$(get_commit_history $versioned_parent_commit $current_commit)"
    local processed_commit=$(echo "$commit_history" | head -n 1)
    commit_history=$(echo "$commit_history" | sed '1d')
    local commit_count
    if [[ -n $commit_history ]]; then
      commit_count="$(echo "$commit_history" | grep -c '^')"
    fi
    
    while [[ -n $commit_history ]]; do
        commit_number=$(($commit_number + 1))
        local commit_to_analyze=$(echo "$commit_history" | head -n 1)
        commit_history=$(echo "$commit_history" | sed '1d')
        verbose "Analyzing commit history for commit $commit_to_analyze"
        local changeImpact=$(evaluate_version_increment $commit_to_analyze $processed_commit)
        increment_version $changeImpact
        processed_commit=$commit_to_analyze
    done

    local semver="$major.$minor.$patch"
    local pre_release_ver=""
    local build_ver=""

    if [[ $no_pre_release -ne 1 ]] && [[ $commit_count -gt 0 ]]; then
        pre_release_ver="beta.$commit_count"
    fi

    if [[ $no_local -ne 1 ]]; then
        if [[ $(git status --porcelain) ]]; then
            if [[ -z $pre_release_ver ]]; then
                pre_release_ver="local"
            else
                pre_release_ver="$pre_release_ver.local"
            fi
        fi
    fi

    if [[ $no_branch -ne 1 ]]; then
        branch="$(git rev-parse --abbrev-ref HEAD)"
        branch="${branch//[^[:alnum:]]/-}"
        build_ver="Branch.$branch"
    fi

    if [[ $no_hash -ne 1 ]]; then
        local hash="$(git rev-parse HEAD)"
        if [[ -z $build_ver ]]; then
            build_ver="Hash.$hash"
        else
            build_ver="$build_ver.Hash.$hash"
        fi
    fi

    if [[ $no_timestamp -ne 1 ]]; then
        local timestamp="$(date -u +%Y%m%d-%H%M%S-%N)"
        if [[ -z $build_ver ]]; then
            build_ver="Timestamp.$timestamp"
        else
            build_ver="$build_ver.Timestamp.$timestamp"
        fi
    fi

    if [[ -n $pre_release_ver ]]; then
        semver="$semver-$pre_release_ver"
    fi

    if [[ -n $build_ver ]]; then
        semver="$semver+$build_ver"
    fi

    echo $semver

    if [[ -n $change_log ]]; then
        readarray -t changes <<< "$(extract_changelog $current_commit $versioned_parent_commit)"
        for change in "${changes[@]}"; do
            echo "$change"
        done
    fi
}


function extract_changelog {
    local commit=$1; shift
    local boundary=$1; shift

    verbose "Extracting changelog between $commit and $boundary"
    local parents=$(git rev-list --first-parent $commit ^$boundary)

    verbose "Commits:\n$parents"
    local parent

    for parent in $parents; do
        verbose "Commit: $parent"
        local message="$(git show -s --format=%s $parent)"
        verbose "Message: '$message'"
        local merged_commits=$(git log --pretty=%P -n 1 $parent | tr ' ' '\n' | sed '1d')
        verbose "Merged Commits: '$merged_commits'"
        local merged_commits_count=$(echo "$merged_commits" | wc -w)
        verbose "Pattern: $merge_pattern"
        merge_match=$(echo "$message" | grep -oP "$merge_pattern")
        verbose "Parsed Message: '$merge_match'"
        if [[ -n "$merge_match" ]]; then
            verbose "Commit is a merge commit with extracted message."
            message=$merge_match
            if [[ $merged_commits_count -eq 0 ]]; then
                merged_commits=$parent
            fi

            for merged_commit in $merged_commits; do
                authors=""
                verbose "Checking authors for merged commit and parents $merged_commit"
                commits_to_check=$(git rev-list $merged_commit ^$parent^1)
                verbose "Commits to check: $commits_to_check"
                local commit_to_check
                for commit_to_check in $commits_to_check; do
                    verbose "Checking author for commit $commit_to_check"
                    author=$(git log --pretty=format:"%an" -n 1 $commit_to_check)
                    verbose "Author: $author"
                    if [[ ! " ${authors[@]} " =~ " $author " ]]; then
                        if [[ -n "$authors" ]]; then
                            authors+=", $author"
                        else
                            authors="$author"
                        fi
                    fi
                done
            done
            
            verbose "Result '$message ($authors)'"
            echo "$message ($authors)"
        elif [[ $merged_commits_count -gt 0 ]]; then
            verbose "Commit is a merge commit with unknown message."
            for merged_commit in $merged_commits; do
                verbose "About to call recursievly for $merged_commit and $parent^1"
                extract_changelog $merged_commit $parent^1
            done
        else
            verbose "Commit is a regular commit."
            author=$(git log --pretty=format:"%an" -n 1 $parent)
            verbose "Result '$message ($author)'"
            echo "$message ($author)"
        fi
    done
}


function evaluate_version_increment {
    local commit_to_analyze=$1; shift
    local processed_commit=$1; shift

    local commits=$(git rev-list --parents $commit_to_analyze ^$processed_commit)
    local unique_commits=$(echo "$commits" | tr ' ' '\n' | sort -u | grep -v "$processed_commit")
    verbose "List of changes:\n$unique_commits"
    local changeImpact=0
    for commit in $unique_commits; do
        verbose "Checking message for commit $commit"
        major_match=$(git show -s --format=%s $commit | grep -oP "$major_pattern")
        minor_match=$(git show -s --format=%s $commit | grep -oP "$minor_pattern")
        
        if [[ -n "$major_match" ]]; then
            changeImpact=3
        elif [[ -n "$minor_match" ]]; then
            if (( $changeImpact < 2 )); then
                changeImpact=2
            fi
        elif (( $changeImpact < 1 )); then
            changeImpact=1
        fi
    done

    echo $changeImpact
}


function get_release_branch {
    local result=$1

    verbose "Checking release branch with provided '$result'."

    if [[ -z $result ]]; then
        verbose "Checking remote HEAD as release branch."
        result="$(git symbolic-ref refs/remotes/origin/HEAD --quiet --short)"
        result="${result#origin/}"
    fi

    if [[ -z $result ]]; then
        verbose "Checking local HEAD as release branch."
        result="$(git symbolic-ref HEAD --quiet --short)"
    fi

    if [[ -z $result ]]; then
        verbose "Checking local branches that contains HEAD."
        local branches=($(git for-each-ref --format='%(refname:short)' refs/heads/ --contains HEAD))
        if [ ${#branches[@]} -eq 1 ]; then
            result="${branches[0]}"
        else
            error "Could not determine release branch name. Use --release-branch parameter."
        fi
    fi

    verbose "Using release branch with value '$result'."
    echo $result
}


function get_current_commit {
    verbose "Checking current commit."
    local result="$(git rev-parse HEAD)"
    verbose "Using current commit '$result'"

    echo $result
}


function get_versioned_parent_and_version {
    local major=0
    local minor=1
    local patch=0
    local commit=$1; shift
    local tag_pattern=$1; shift

    verbose "Checking versioned parent of commit '$commit' uisng tag pattern '$tag_pattern'."
    tag_pattern=$(echo "$tag_pattern" | sed -e 's/()/([0-9]+)\.([0-9]+)\.([0-9]+)/g')
    verbose "Expanded tag pattern is '$tag_pattern'."
    while :
    do
        verbose "Describing commit '$commit'."
        local result="$(git describe --tags --abbrev=0 --match '?*.?*.?*' --always --first-parent $commit)"
        verbose "Candidate tag is '$result'."
        
        if [[ "$result" =~ $tag_pattern ]]; then
            verbose "Candidate matches tag pattern."
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            break
        fi

        verbose "Candidate does not match tag pattern. Checking parent."
        local parent="$(git log --format=%P -n 1 $result | cut -d ' ' -f 1)"
        verbose "Candidate's parent is '$parent'."
        if [[ -z $parent ]]; then
            verbose "Candidate is an initial commit."
            break
        fi

        commit=$parent
    done

    result="$(git rev-list -n 1 $result)"
    verbose "Using versioned parent '$result'"
    verbose "Using base version '$major.$minor.$patch'"
    echo $result
    echo "$major.$minor.$patch"
}


function get_commit_history {
    local versioned_parent_commit=$1; shift
    local current_commit=$1; shift

    verbose "Checking commit history between '$versioned_parent_commit' and '$current_commit'."
    local result="$(git rev-list --first-parent --reverse $versioned_parent_commit..$current_commit)"
    result=$(echo "$versioned_parent_commit\n$result" | tr ' ' '\n')
    verbose "Commits history:\n$result"
    echo -e "$result"
}


function get_last_versioned_commit {
    local tag_pattern=$1 | sed -e 's/()/([0-9]+)\.([0-9]+)\.([0-9]+)/g'

    local last_versioned_commit="$(git describe --tags --abbrev=0 --match '?*.?*.?*' --always)"

    if [[ "$last_versioned_commit" =~ $tag_pattern ]]; then
        echo $last_versioned_commit
    else
        echo "$(git rev-list --max-parents=0 HEAD)"
    fi
}


function increment_version {
    local change=$1

    if [[ "$change" -eq 3 ]]; then
        verbose "Incrementing major version."
        major=$(($major + 1))
        minor=0
        patch=0
    fi

    if [[ "$change" -eq 2 ]]; then
        verbose "Incrementing minor version."
        minor=$(($minor + 1))
        patch=0
    fi

    if [[ "$change" -eq 1 ]]; then
        verbose "Incrementing patch version."
        patch=$(($patch + 1))
    fi
}


function log_verbose {
    local line_number=$1;   shift
    local function_name=$1; shift

    if [[ "$verbose" -eq 1 ]]; then
        printf "$function_name[$line_number]: %b\n" "$*" >&3
    fi
}


function log_error {
    local line_number=$1;   shift
    local function_name=$1; shift

    printf "$function_name[$line_number]: %b\n" "$*" >&2
    exit $line_number
}

main "$@"
